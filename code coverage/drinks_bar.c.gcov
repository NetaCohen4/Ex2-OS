        -:    0:Source:drinks_bar.c
        -:    1:/*
        -:    2:מה נשאר לעשות:
        -:    3:2. לעבור על כל הסעיפים של השאלה ולוודא שהכל עובד
        -:    4:3. code coverage
        -:    5:4. להוסיף הערות 
        -:    6:5. ברגע שהרצנו קוד קוברג' גילינו שגיאות שצריך לטפל
        -:    7:
        -:    8:*/
        -:    9:
        -:   10:#define _GNU_SOURCE
        -:   11:#include <stdio.h>
        -:   12:#include <stdlib.h>
        -:   13:#include <string.h>
        -:   14:#include <unistd.h>
        -:   15:#include <errno.h>
        -:   16:#include <sys/types.h>
        -:   17:#include <sys/socket.h>
        -:   18:#include <sys/un.h>
        -:   19:#include <netinet/in.h>
        -:   20:#include <arpa/inet.h>
        -:   21:#include <getopt.h>
        -:   22:#include <signal.h>
        -:   23:#include <fcntl.h>
        -:   24:#include <sys/time.h>
        -:   25:#include <sys/mman.h>
        -:   26:#include <sys/stat.h>
        -:   27:#include <pthread.h>
        -:   28:
        -:   29:#define BUFFER_SIZE 1024
        -:   30:#define MAX_CLIENTS 100
        -:   31:#define MAX_ATOMS 1000000000000000000ULL // 10^18
        -:   32:
        -:   33:
        -:   34:typedef struct {
        -:   35:    unsigned long long carbon;
        -:   36:    unsigned long long oxygen;
        -:   37:    unsigned long long hydrogen;
        -:   38:    pthread_mutex_t mutex;
        -:   39:} AtomInventory;
        -:   40:
        -:   41:// Global variables
        -:   42:AtomInventory static_inventory = {0, 0, 0, PTHREAD_MUTEX_INITIALIZER};
        -:   43:AtomInventory *inventory = &static_inventory;
        -:   44:int tcp_port = -1, udp_port = -1;
        -:   45:char *uds_stream_path = NULL;
        -:   46:char *uds_dgram_path = NULL;
        -:   47:char *save_file_path = NULL;
        -:   48:int timeout = 0;
        -:   49:int save_fd = -1;
        -:   50:int use_file_storage = 0;
        -:   51:
        -:   52:// פונקציות עזר למלאי
       15:   53:void print_inventory() {
       15:   54:    printf("Current inventory: Carbon=%llu, Oxygen=%llu, Hydrogen=%llu\n", 
       15:   55:           inventory->carbon, inventory->oxygen, inventory->hydrogen);
       15:   56:}
        -:   57:
       27:   58:void lock_inventory() {
       27:   59:    if (use_file_storage) {
       27:   60:        int rc = pthread_mutex_lock(&inventory->mutex);
       27:   61:        if (rc == EOWNERDEAD) {
    #####:   62:            pthread_mutex_consistent(&inventory->mutex);
       27:   63:        } else if (rc != 0) {
    #####:   64:            perror("pthread_mutex_lock");
    #####:   65:            exit(EXIT_FAILURE);
        -:   66:        }
        -:   67:    }
       27:   68:}
        -:   69:
       27:   70:void unlock_inventory() {
       27:   71:    if (use_file_storage) {
       27:   72:        int rc = pthread_mutex_unlock(&inventory->mutex);
       27:   73:        if (rc != 0) {
    #####:   74:            perror("pthread_mutex_unlock");
        -:   75:        }
        -:   76:    }
       27:   77:}
        -:   78:
        -:   79:// Write from RAM to DISK (sync)
       18:   80:void sync_to_file() {
      18*:   81:    if (!use_file_storage || save_fd == -1) return;
        -:   82:    
        -:   83:    // מסנכרן מהזיכרון לקובץ
       18:   84:    if (msync(inventory, sizeof(AtomInventory), MS_SYNC) == -1) {
    #####:   85:        perror("msync");
        -:   86:    }
        -:   87:}
        -:   88:
        1:   89:int setup_file_storage() {
       1*:   90:    if (!save_file_path) return 0;
        -:   91:    
        1:   92:    use_file_storage = 1;
        -:   93:    
        -:   94:    // בדיקה אם הקובץ קיים
        -:   95:    struct stat st;
        1:   96:    int file_exists = (stat(save_file_path, &st) == 0);
        -:   97:    
        -:   98:    // פתיחת הקובץ
        1:   99:    save_fd = open(save_file_path, O_RDWR | O_CREAT, 0666);
        1:  100:    if (save_fd == -1) {
    #####:  101:        perror("open save file");
    #####:  102:        return -1;
        -:  103:    }
        -:  104:    
        1:  105:    if (!file_exists) {
        -:  106:        // קובץ חדש - יצירת מבנה ריק
    #####:  107:        AtomInventory empty_inventory = {inventory->carbon, inventory->oxygen, inventory->hydrogen, PTHREAD_MUTEX_INITIALIZER};
    #####:  108:        if (write(save_fd, &empty_inventory, sizeof(AtomInventory)) != sizeof(AtomInventory)) {
    #####:  109:            perror("write to save file");
    #####:  110:            close(save_fd);
    #####:  111:            return -1;
        -:  112:        }
        -:  113:    }
        -:  114:    
        -:  115:    // הגדלת הקובץ לגודל הנדרש
        1:  116:    if (ftruncate(save_fd, sizeof(AtomInventory)) == -1) {
    #####:  117:        perror("ftruncate");
    #####:  118:        close(save_fd);
    #####:  119:        return -1;
        -:  120:    }
        -:  121:    
        -:  122:    // מיפוי הקובץ לזיכרון
        1:  123:    inventory = mmap(NULL, sizeof(AtomInventory), PROT_READ | PROT_WRITE, 
        -:  124:                    MAP_SHARED, save_fd, 0);
        1:  125:    if (inventory == MAP_FAILED) {
    #####:  126:        perror("mmap");
    #####:  127:        close(save_fd);
    #####:  128:        return -1;
        -:  129:    }
        -:  130:    
        -:  131:    // אם קובץ חדש, אתחול mutex
        1:  132:    if (!file_exists) {
        -:  133:        pthread_mutexattr_t attr;
    #####:  134:        pthread_mutexattr_init(&attr);
    #####:  135:        pthread_mutexattr_setpshared(&attr, PTHREAD_PROCESS_SHARED);
    #####:  136:        pthread_mutexattr_setrobust(&attr, PTHREAD_MUTEX_ROBUST);   // תמיכה ב-EOWNERDEAD
    #####:  137:        pthread_mutex_init(&inventory->mutex, &attr);
    #####:  138:        pthread_mutexattr_destroy(&attr);
        -:  139:    }
        -:  140:
        1:  141:    sync_to_file();
        -:  142:    
        1:  143:    return 0;
        -:  144:}
        -:  145:
        6:  146:int add_atoms(const char *type, unsigned long long amount) {
        6:  147:    lock_inventory();
        6:  148:    int result = 0;
        6:  149:    if (strcmp(type, "CARBON") == 0) {
        2:  150:        if (inventory->carbon + amount <= MAX_ATOMS) {
        2:  151:            inventory->carbon += amount;
        2:  152:            result = 1;
        -:  153:        }
        4:  154:    } else if (strcmp(type, "OXYGEN") == 0) {
        2:  155:        if (inventory->oxygen + amount <= MAX_ATOMS) {
        2:  156:            inventory->oxygen += amount;
        2:  157:            result = 1;
        -:  158:        }
        2:  159:    } else if (strcmp(type, "HYDROGEN") == 0) {
        2:  160:        if (inventory->hydrogen + amount <= MAX_ATOMS) {
        2:  161:            inventory->hydrogen += amount;
        2:  162:            result = 1;
        -:  163:        }
        -:  164:    }
        -:  165:    
        6:  166:    if (result) {
        6:  167:        sync_to_file();
        -:  168:    }
        -:  169:
        6:  170:    unlock_inventory();
        6:  171:    return result;
        -:  172:}
        -:  173:
       10:  174:int can_deliver_molecules(const char *molecule, unsigned long long amount) {
       10:  175:    lock_inventory();
        -:  176:    
       10:  177:    int result = 0;
       10:  178:    if (strcmp(molecule, "WATER") == 0) {
       2*:  179:        result = (inventory->hydrogen >= 2 * amount && inventory->oxygen >= amount);
        8:  180:    } else if (strcmp(molecule, "CARBON DIOXIDE") == 0) {
       2*:  181:        result = (inventory->carbon >= amount && inventory->oxygen >= 2 * amount);
        6:  182:    } else if (strcmp(molecule, "GLUCOSE") == 0) {
        2:  183:        result = (inventory->carbon >= 6 * amount && 
       4*:  184:                inventory->hydrogen >= 12 * amount && 
        2:  185:                inventory->oxygen >= 6 * amount);
        4:  186:    } else if (strcmp(molecule, "ALCOHOL") == 0) {
        2:  187:        result = (inventory->carbon >= 2 * amount && 
       4*:  188:                inventory->hydrogen >= 6 * amount && 
        2:  189:                inventory->oxygen >= amount);
        -:  190:    }
        -:  191:    
       10:  192:    unlock_inventory();
       10:  193:    return result;
        -:  194:}
        -:  195:
        8:  196:void deliver_molecules(const char *molecule, unsigned long long amount) {
        8:  197:    lock_inventory();
        -:  198:    
        8:  199:    if (strcmp(molecule, "WATER") == 0) {
        2:  200:        inventory->hydrogen -= 2 * amount;
        2:  201:        inventory->oxygen -= amount;
        6:  202:    } else if (strcmp(molecule, "CARBON DIOXIDE") == 0) {
        2:  203:        inventory->carbon -= amount;
        2:  204:        inventory->oxygen -= 2 * amount;
        4:  205:    } else if (strcmp(molecule, "GLUCOSE") == 0) {
        2:  206:        inventory->carbon -= 6 * amount;
        2:  207:        inventory->hydrogen -= 12 * amount;
        2:  208:        inventory->oxygen -= 6 * amount;
        2:  209:    } else if (strcmp(molecule, "ALCOHOL") == 0) {
        2:  210:        inventory->carbon -= 2 * amount;
        2:  211:        inventory->hydrogen -= 6 * amount;
        2:  212:        inventory->oxygen -= amount;
        -:  213:    }
        -:  214:    
        8:  215:    sync_to_file();
        8:  216:    unlock_inventory();
        8:  217:}
        -:  218:
        -:  219:
        3:  220:void handle_console_command(const char *drink) {
        3:  221:    lock_inventory();
        3:  222:    int amount = 0;
        -:  223:
        3:  224:    if (strncmp(drink, "SOFT DRINK", 10) == 0) {
        -:  225:        // water + co2 + glucose
        -:  226:        // CARBON 7 OXYGEN 9 HYDROGEN 14
        1:  227:        int c = inventory->carbon / 7;
        1:  228:        int o = inventory->oxygen / 9;
        1:  229:        int h = inventory->hydrogen / 14;
       1*:  230:        amount = (c < o && c < h) ? c : ((o < h) ? o : h);
        2:  231:    } else if (strncmp(drink, "VODKA", 5) == 0) {
        -:  232:        // water + alcohol + glucose
        -:  233:        // CARBON 8 OXYGEN 8 HYDROGEN 20
        1:  234:        int c = inventory->carbon / 8;
        1:  235:        int o = inventory->oxygen / 8;
        1:  236:        int h = inventory->hydrogen / 20;
       1*:  237:        amount = (c < o && c < h) ? c : ((o < h) ? o : h);
        1:  238:    } else if (strncmp(drink, "CHAMPAGNE", 9) == 0) {
        -:  239:        // water + co2 + alcohol
        -:  240:        // CARBON 3 OXYGEN 4 HYDROGEN 8
        1:  241:        int c = inventory->carbon / 3;
        1:  242:        int o = inventory->oxygen / 4;
        1:  243:        int h = inventory->hydrogen / 8;
       1*:  244:        amount = (c < o && c < h) ? c : ((o < h) ? o : h);
        -:  245:    } else {
    #####:  246:        printf("ERROR: Unknown drink type\n");
    #####:  247:        sync_to_file();
    #####:  248:        unlock_inventory();
    #####:  249:        return;
        -:  250:    }
        -:  251:
        3:  252:    printf("Can generate %d units of %s\n", amount, drink);
        -:  253:
        3:  254:    sync_to_file();
        3:  255:    unlock_inventory();
        -:  256:}
        -:  257:
        -:  258:// יצירת סוקטים - ללא שינוי
        1:  259:int setup_tcp_socket(int port) {
        -:  260:    int sockfd;
        -:  261:    struct sockaddr_in addr;
        1:  262:    int opt = 1;
        -:  263:
        1:  264:    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    #####:  265:        perror("TCP socket");
    #####:  266:        return -1;
        -:  267:    }
        1:  268:    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0) {
    #####:  269:        perror("setsockopt TCP");
    #####:  270:        close(sockfd);
    #####:  271:        return -1;
        -:  272:    }
        1:  273:    memset(&addr, 0, sizeof(addr));
        1:  274:    addr.sin_family = AF_INET;
        1:  275:    addr.sin_addr.s_addr = INADDR_ANY;
        1:  276:    addr.sin_port = htons(port);
        1:  277:    if (bind(sockfd, (struct sockaddr*)&addr, sizeof(addr)) < 0) {
    #####:  278:        perror("bind TCP");
    #####:  279:        close(sockfd);
    #####:  280:        return -1;
        -:  281:    }
        1:  282:    if (listen(sockfd, 10) < 0) {
    #####:  283:        perror("listen TCP");
    #####:  284:        close(sockfd);
    #####:  285:        return -1;
        -:  286:    }
        1:  287:    return sockfd;
        -:  288:}
        -:  289:
        1:  290:int setup_udp_socket(int port) {
        -:  291:    int sockfd;
        -:  292:    struct sockaddr_in addr;
        1:  293:    int opt = 1;
        -:  294:
        1:  295:    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
    #####:  296:        perror("UDP socket");
    #####:  297:        return -1;
        -:  298:    }
        1:  299:    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0) {
    #####:  300:        perror("setsockopt UDP");
    #####:  301:        close(sockfd);
    #####:  302:        return -1;
        -:  303:    }
        1:  304:    memset(&addr, 0, sizeof(addr));
        1:  305:    addr.sin_family = AF_INET;
        1:  306:    addr.sin_addr.s_addr = INADDR_ANY;
        1:  307:    addr.sin_port = htons(port);
        1:  308:    if (bind(sockfd, (struct sockaddr*)&addr, sizeof(addr)) < 0) {
    #####:  309:        perror("bind UDP");
    #####:  310:        close(sockfd);
    #####:  311:        return -1;
        -:  312:    }
        1:  313:    return sockfd;
        -:  314:}
        -:  315:
        1:  316:int setup_uds_stream_socket(const char *path) {
        -:  317:    int sockfd;
        -:  318:    struct sockaddr_un addr;
        -:  319:
        1:  320:    unlink(path);
        1:  321:    if ((sockfd = socket(AF_UNIX, SOCK_STREAM, 0)) < 0) {
    #####:  322:        perror("UDS stream socket");
    #####:  323:        return -1;
        -:  324:    }
        1:  325:    memset(&addr, 0, sizeof(addr));
        1:  326:    addr.sun_family = AF_UNIX;
        1:  327:    strncpy(addr.sun_path, path, sizeof(addr.sun_path) - 1);
        1:  328:    if (bind(sockfd, (struct sockaddr*)&addr, sizeof(addr)) < 0) {
    #####:  329:        perror("bind UDS stream");
    #####:  330:        close(sockfd);
    #####:  331:        return -1;
        -:  332:    }
        1:  333:    if (listen(sockfd, 10) < 0) {
    #####:  334:        perror("listen UDS stream");
    #####:  335:        close(sockfd);
    #####:  336:        return -1;
        -:  337:    }
        1:  338:    return sockfd;
        -:  339:}
        -:  340:
        1:  341:int setup_uds_dgram_socket(const char *path) {
        -:  342:    int sockfd;
        -:  343:    struct sockaddr_un addr;
        -:  344:
        1:  345:    unlink(path);
        1:  346:    if ((sockfd = socket(AF_UNIX, SOCK_DGRAM, 0)) < 0) {
    #####:  347:        perror("UDS dgram socket");
    #####:  348:        return -1;
        -:  349:    }
        1:  350:    memset(&addr, 0, sizeof(addr));
        1:  351:    addr.sun_family = AF_UNIX;
        1:  352:    strncpy(addr.sun_path, path, sizeof(addr.sun_path) - 1);
        1:  353:    if (bind(sockfd, (struct sockaddr*)&addr, sizeof(addr)) < 0) {
    #####:  354:        perror("bind UDS dgram");
    #####:  355:        close(sockfd);
    #####:  356:        return -1;
        -:  357:    }
        1:  358:    return sockfd;
        -:  359:}
        -:  360:
        -:  361:// טיפול בפקודות TCP/UDS Stream
        9:  362:int handle_stream_client(int client_fd, int client_fds[]) {
        -:  363:    char buffer[BUFFER_SIZE];
        9:  364:    ssize_t nbytes = recv(client_fd, buffer, sizeof(buffer) - 1, 0);
        -:  365:    
        9:  366:    if (nbytes <= 0) {
        2:  367:        if (nbytes != 0) {
        1:  368:            perror("recv stream client");
        -:  369:        }
        2:  370:        close(client_fd);
        -:  371:        // מסירה מהמערך
        3:  372:        for (int i = 0; i < MAX_CLIENTS; i++) {
        3:  373:            if (client_fds[i] == client_fd) {
        2:  374:                client_fds[i] = -1;
        2:  375:                break;
        -:  376:            }
        -:  377:        }
        2:  378:        return -1;
        -:  379:    }
        -:  380:
        7:  381:    buffer[nbytes] = '\0';
        7:  382:    if (buffer[nbytes-1] == '\n') buffer[nbytes-1] = '\0';
        -:  383:
        -:  384:    char atom_type[64];
        -:  385:    unsigned long long amount;
        -:  386:    
        7:  387:    if (sscanf(buffer, "ADD %s %llu", atom_type, &amount) == 2) {
        6:  388:        if (add_atoms(atom_type, amount)) {
        6:  389:            print_inventory();
        -:  390:        } else {
    #####:  391:            const char *response = "ERROR: Invalid atom type or amount too large\n";
    #####:  392:            send(client_fd, response, strlen(response), 0);
        -:  393:        }
        -:  394:    } else {
        1:  395:        const char *response = "ERROR: Invalid command\n";
        1:  396:        send(client_fd, response, strlen(response), 0);
        -:  397:    }
        -:  398:    
        7:  399:    return 0;
        -:  400:}
        -:  401:
        -:  402:// טיפול בפקודות UDP/UDS Datagram
       10:  403:void handle_dgram_socket(int dgram_fd) {
        -:  404:    char buffer[BUFFER_SIZE];
        -:  405:    struct sockaddr_storage client_addr;
       10:  406:    socklen_t addr_len = sizeof(client_addr);
        -:  407:    
       10:  408:    ssize_t nbytes = recvfrom(dgram_fd, buffer, sizeof(buffer) - 1, 0,
        -:  409:                              (struct sockaddr*)&client_addr, &addr_len);
       10:  410:    if (nbytes < 0) {
    #####:  411:        perror("recv from dgram");
    #####:  412:        return;
        -:  413:    }
        -:  414:
       10:  415:    buffer[nbytes] = '\0';
      10*:  416:    if (buffer[nbytes-1] == '\n') buffer[nbytes-1] = '\0';
        -:  417:    
        -:  418:    char molecule_type[64];
        -:  419:    unsigned long long amount;
        -:  420:    
       10:  421:    if (sscanf(buffer, "DELIVER %63[^0-9] %llu", molecule_type, &amount) == 2) {
       10:  422:        size_t len = strlen(molecule_type);
       10:  423:        if (len > 0 && molecule_type[len - 1] == ' ') {
       10:  424:            molecule_type[len - 1] = '\0';
        -:  425:        }
       10:  426:        if (can_deliver_molecules(molecule_type, amount)) {
        8:  427:            deliver_molecules(molecule_type, amount);
        8:  428:            const char *response = "YES\n";
        8:  429:            sendto(dgram_fd, response, strlen(response), 0,
        -:  430:                   (struct sockaddr*)&client_addr, addr_len);
        8:  431:            print_inventory();
        -:  432:        } else {
        2:  433:            const char *response = "NO\n";
        2:  434:            sendto(dgram_fd, response, strlen(response), 0,
        -:  435:                   (struct sockaddr*)&client_addr, addr_len);
        -:  436:        }
        -:  437:    } else {
    #####:  438:        const char *response = "ERROR: Invalid command\n";
    #####:  439:        sendto(dgram_fd, response, strlen(response), 0,
        -:  440:               (struct sockaddr*)&client_addr, addr_len);
        -:  441:    }
        -:  442:}
        -:  443:
        -:  444:// טיפול בקלט מהמקלדת
        5:  445:void handle_keyboard_input() {
        -:  446:    char buffer[BUFFER_SIZE];
       5*:  447:    if (fgets(buffer, sizeof(buffer), stdin) == NULL) return;
        -:  448:    
        5:  449:    buffer[strcspn(buffer, "\n")] = '\0';
        -:  450:    
        5:  451:    if (strcmp(buffer, "GEN SOFT DRINK") == 0) {
        1:  452:        handle_console_command("SOFT DRINK");
        4:  453:    } else if (strcmp(buffer, "GEN VODKA") == 0) {
        1:  454:        handle_console_command("VODKA");
        3:  455:    } else if (strcmp(buffer, "GEN CHAMPAGNE") == 0) {
        1:  456:        handle_console_command("CHAMPAGNE");
        -:  457:    } else {
        2:  458:        printf("Invalid command. Use: GEN SOFT DRINK, GEN VODKA, or GEN CHAMPAGNE\n");
        -:  459:    }
        -:  460:}
        -:  461:
    #####:  462:void print_usage(const char *prog_name) {
    #####:  463:    printf("Usage: %s -T <tcp_port> -U <udp_port> [options]\n", prog_name);
    #####:  464:    printf("Required options:\n");
    #####:  465:    printf("  -T, --tcp-port <port>       TCP port\n");
    #####:  466:    printf("  -U, --udp-port <port>       UDP port\n");
    #####:  467:    printf("Optional options:\n");
    #####:  468:    printf("  -c, --carbon <amount>       Initial carbon atoms\n");
    #####:  469:    printf("  -o, --oxygen <amount>       Initial oxygen atoms\n");
    #####:  470:    printf("  -h, --hydrogen <amount>     Initial hydrogen atoms\n");
    #####:  471:    printf("  -t, --timeout <seconds>     Timeout in seconds\n");
    #####:  472:    printf("  -s, --stream-path <path>    UDS stream socket path\n");
    #####:  473:    printf("  -d, --datagram-path <path>  UDS datagram socket path\n");
    #####:  474:    printf("  -f, --save-file <path>      Save file path for inventory\n");
    #####:  475:}
        -:  476:
        1:  477:void cleanup() {
        1:  478:    if (use_file_storage && inventory != NULL) {
        1:  479:        munmap(inventory, sizeof(AtomInventory));
        1:  480:        inventory = NULL;
        -:  481:    }
        1:  482:    if (save_fd != -1) {
        1:  483:        close(save_fd);
        1:  484:        save_fd = -1;
        -:  485:    }
        1:  486:    if (uds_stream_path) {
        1:  487:        unlink(uds_stream_path);
        -:  488:    }
        1:  489:    if (uds_dgram_path) {
        1:  490:        unlink(uds_dgram_path);
        -:  491:    }
        1:  492:}
        -:  493:
        -:  494:
        1:  495:int main(int argc, char *argv[]) {
        1:  496:    signal(SIGINT, exit);   // Ctrl+C
        1:  497:    signal(SIGTERM, exit);  // kill (ללא -9)
        -:  498:    int opt;
        1:  499:    int tcp_sock = -1, udp_sock = -1, uds_stream_sock = -1, uds_dgram_sock = -1;
        -:  500:    int client_fds[MAX_CLIENTS];
        -:  501:    fd_set read_fds, master_fds;
        -:  502:    int max_fd;
        -:  503:    //inventory = malloc(sizeof(AtomInventory));
        -:  504:    /*
        -:  505:    if (!inventory) {
        -:  506:        perror("malloc");
        -:  507:        exit(EXIT_FAILURE);
        -:  508:    }*/
        -:  509:
        -:  510:
        -:  511:    // אתחול מערך לקוחות
      101:  512:    for (int i = 0; i < MAX_CLIENTS; i++) client_fds[i] = -1;
        -:  513:
        -:  514:    static struct option long_options[] = {
        -:  515:        {"tcp-port", required_argument, 0, 'T'},
        -:  516:        {"udp-port", required_argument, 0, 'U'},
        -:  517:        {"carbon", required_argument, 0, 'c'},
        -:  518:        {"oxygen", required_argument, 0, 'o'},
        -:  519:        {"hydrogen", required_argument, 0, 'h'},
        -:  520:        {"timeout", required_argument, 0, 't'},
        -:  521:        {"stream-path", required_argument, 0, 's'},
        -:  522:        {"datagram-path", required_argument, 0, 'd'},
        -:  523:        {"save-file", required_argument, 0, 'f'},
        -:  524:        {"help", no_argument, 0, '?'},
        -:  525:        {0, 0, 0, 0}
        -:  526:    };
        -:  527:
       10:  528:    while ((opt = getopt_long(argc, argv, "T:U:c:o:h:t:s:d:f:?", long_options, NULL)) != -1) {
        9:  529:        switch (opt) {
        1:  530:            case 'T':
        1:  531:                tcp_port = atoi(optarg);
        1:  532:                break;
        1:  533:            case 'U':
        1:  534:                udp_port = atoi(optarg);
        1:  535:                break;
        1:  536:            case 'c':
        1:  537:                inventory->carbon = strtoull(optarg, NULL, 10);
        1:  538:                break;
        1:  539:            case 'o':
        1:  540:                inventory->oxygen = strtoull(optarg, NULL, 10);
        1:  541:                break;
        1:  542:            case 'h':
        1:  543:                inventory->hydrogen = strtoull(optarg, NULL, 10);
        1:  544:                break;
        1:  545:            case 't':
        1:  546:                timeout = atoi(optarg);
        1:  547:                break;
        1:  548:            case 's':
        1:  549:                uds_stream_path = optarg;
        1:  550:                break;
        1:  551:            case 'd':
        1:  552:                uds_dgram_path = optarg;
        1:  553:                break;
        1:  554:            case 'f':
        1:  555:                save_file_path = optarg;
        1:  556:                break;
    #####:  557:            case '?':
        -:  558:            default:
    #####:  559:                print_usage(argv[0]);
    #####:  560:                exit(EXIT_FAILURE);
        -:  561:        }
        -:  562:    }
        -:  563:
        -:  564:    // בדיקת פרמטרים הכרחיים
        1:  565:    if (tcp_port == -1 || udp_port == -1) {
    #####:  566:        fprintf(stderr, "Error: TCP port (-T) and UDP port (-U) are required\n");
    #####:  567:        print_usage(argv[0]);
    #####:  568:        exit(EXIT_FAILURE);
        -:  569:    }
        -:  570:
        -:  571:    // הגדרת מיפוי קובץ או זיכרון רגיל
        1:  572:    if (save_file_path) {
        1:  573:        if (setup_file_storage() < 0) {
    #####:  574:            fprintf(stderr, "Error: Failed to setup file storage\n");
    #####:  575:            exit(EXIT_FAILURE);
        -:  576:        }
        -:  577:    }
        -:  578:
        -:  579:    // Go over all the sockets and the file and clean what not necessary
        1:  580:    atexit(cleanup);
        -:  581:
        -:  582:    // יצירת סוקטים
        1:  583:    tcp_sock = setup_tcp_socket(tcp_port);
        1:  584:    if (tcp_sock < 0) {
    #####:  585:        close(tcp_sock);
    #####:  586:        exit(EXIT_FAILURE);
        -:  587:    }
        -:  588:
        1:  589:    udp_sock = setup_udp_socket(udp_port);
        1:  590:    if (udp_sock < 0) {
    #####:  591:        close(udp_sock);
    #####:  592:        exit(EXIT_FAILURE);
        -:  593:    }
        -:  594:
        1:  595:    if (uds_stream_path) {
        1:  596:        uds_stream_sock = setup_uds_stream_socket(uds_stream_path);
        1:  597:        if (uds_stream_sock < 0) {
    #####:  598:            fprintf(stderr, "Warning: Could not create UDS stream socket\n");
        -:  599:        }
        -:  600:    }
        -:  601:
        1:  602:    if (uds_dgram_path) {
        1:  603:        uds_dgram_sock = setup_uds_dgram_socket(uds_dgram_path);
        1:  604:        if (uds_dgram_sock < 0) {
    #####:  605:            fprintf(stderr, "Warning: Could not create UDS datagram socket\n");
        -:  606:        }
        -:  607:    }
        -:  608:
        1:  609:    printf("Server started:\n");
        1:  610:    printf(" - TCP port: %d\n", tcp_port);
        1:  611:    printf(" - UDP port: %d\n", udp_port);
        1:  612:    if (uds_stream_sock >= 0) printf(" - UDS Stream: %s\n", uds_stream_path);
        1:  613:    if (uds_dgram_sock >= 0) printf(" - UDS Datagram: %s\n", uds_dgram_path);
        1:  614:    if (save_file_path) printf(" - Save file: %s\n", save_file_path);
        1:  615:    if (timeout > 0) printf(" - Timeout: %d seconds\n", timeout);
        1:  616:    print_inventory();
        -:  617:
        -:  618:    // הגדרת fd_set
       17:  619:    FD_ZERO(&master_fds);
        1:  620:    FD_SET(tcp_sock, &master_fds);
        1:  621:    FD_SET(udp_sock, &master_fds);
        1:  622:    FD_SET(STDIN_FILENO, &master_fds);
        -:  623:    
        1:  624:    max_fd = (tcp_sock > udp_sock) ? tcp_sock : udp_sock;
        -:  625:    
        1:  626:    if (uds_stream_sock >= 0) {
        1:  627:        FD_SET(uds_stream_sock, &master_fds);
        1:  628:        if (uds_stream_sock > max_fd) max_fd = uds_stream_sock;
        -:  629:    }
        1:  630:    if (uds_dgram_sock >= 0) {
        1:  631:        FD_SET(uds_dgram_sock, &master_fds);
        1:  632:        if (uds_dgram_sock > max_fd) max_fd = uds_dgram_sock;
        -:  633:    }
        -:  634:
        1:  635:    time_t last_activity = time(NULL);
        -:  636:    // לולאת השרת הראשית
       26:  637:    while (1) {
        -:  638:
        -:  639:        // Check timeout BEFORE select()
       27:  640:        if (timeout > 0) {
       27:  641:            time_t now = time(NULL);
       27:  642:            if (difftime(now, last_activity) >= timeout) {
    #####:  643:                printf("Timeout reached with no activity. Exiting.\n");
    #####:  644:                break;
        -:  645:            }
        -:  646:        }
        -:  647:
       27:  648:        read_fds = master_fds;
        -:  649:        
        -:  650:        // הוספת לקוחות מחוברים לסט
     2727:  651:        for (int i = 0; i < MAX_CLIENTS; i++) {
     2700:  652:            if (client_fds[i] != -1) {
       24:  653:                FD_SET(client_fds[i], &read_fds);
       24:  654:                if (client_fds[i] > max_fd) max_fd = client_fds[i];
        -:  655:            }
        -:  656:        }
        -:  657:
        -:  658:        
        -:  659:        struct timeval tv;
       27:  660:        if (timeout > 0) {
       27:  661:            time_t now = time(NULL);
       27:  662:            int time_left = timeout - (int)difftime(now, last_activity);
       27:  663:            if (time_left <= 0) {
    #####:  664:                printf("Timeout reached with no activity. Exiting.\n");
    #####:  665:                break;
        -:  666:            }
       27:  667:            tv.tv_sec = time_left;
       27:  668:            tv.tv_usec = 0;
        -:  669:        } else {
    #####:  670:            tv.tv_sec = 1;
    #####:  671:            tv.tv_usec = 0;
        -:  672:        }
        -:  673:
       27:  674:        int activity = select(max_fd + 1, &read_fds, NULL, NULL, &tv);
        -:  675:        
      26*:  676:        if (activity < 0 && errno != EINTR) {
    #####:  677:            perror("select error");
    #####:  678:            continue;
        -:  679:        }
        -:  680:
        -:  681:        // If select() timed out and we have a timeout set, check if we should exit
      26*:  682:        if (activity == 0 && timeout > 0) {
    #####:  683:            time_t now = time(NULL);
    #####:  684:            if (difftime(now, last_activity) >= timeout) {
    #####:  685:                printf("Timeout reached with no activity. Exiting.\n");
    #####:  686:                break;
        -:  687:            }
    #####:  688:            continue; // Go back to the beginning of the loop
        -:  689:        }
        -:  690:
        -:  691:        // קלט מהמקלדת
       26:  692:        if (FD_ISSET(STDIN_FILENO, &read_fds)) {
        5:  693:            handle_keyboard_input();
        5:  694:            last_activity = time(NULL);
        -:  695:        }
        -:  696:
        -:  697:        // חיבור TCP חדש
       26:  698:        if (FD_ISSET(tcp_sock, &read_fds)) {
        -:  699:            struct sockaddr_in client_addr;
        1:  700:            socklen_t addr_len = sizeof(client_addr);
        1:  701:            int new_fd = accept(tcp_sock, (struct sockaddr*)&client_addr, &addr_len);
        1:  702:            if (new_fd >= 0) {
        1:  703:                int added = 0;
        2:  704:                for (int i = 0; i < MAX_CLIENTS; i++) {
        2:  705:                    if (client_fds[i] == -1) {
        1:  706:                        client_fds[i] = new_fd;
        1:  707:                        added = 1;
        1:  708:                        break;
        -:  709:                    }
        -:  710:                }
        1:  711:                if (!added) {
    #####:  712:                    fprintf(stderr, "Too many clients\n");
    #####:  713:                    close(new_fd);
        -:  714:                }
        -:  715:            }
        -:  716:        }
        -:  717:
        -:  718:        
        -:  719:        // חיבור UDS Stream חדש
       26:  720:        if (uds_stream_sock >= 0 && FD_ISSET(uds_stream_sock, &read_fds)) {
        -:  721:            struct sockaddr_un client_addr;
        1:  722:            socklen_t addr_len = sizeof(client_addr);
        1:  723:            int new_fd = accept(uds_stream_sock, (struct sockaddr*)&client_addr, &addr_len);
        1:  724:            if (new_fd >= 0) {
        1:  725:                int added = 0;
       1*:  726:                for (int i = 0; i < MAX_CLIENTS; i++) {
        1:  727:                    if (client_fds[i] == -1) {
        1:  728:                        client_fds[i] = new_fd;
        1:  729:                        added = 1;
        1:  730:                        break;
        -:  731:                    }
        -:  732:                }
        1:  733:                if (!added) {
    #####:  734:                    fprintf(stderr, "Too many clients\n");
    #####:  735:                    close(new_fd);
        -:  736:                }
        -:  737:            }
        -:  738:        }
        -:  739:
        -:  740:        // טיפול בלקוחות stream & TCP קיימים
     2626:  741:        for (int i = 0; i < MAX_CLIENTS; i++) {
     2600:  742:            if (client_fds[i] != -1 && FD_ISSET(client_fds[i], &read_fds)) {
        9:  743:                handle_stream_client(client_fds[i], client_fds);
        9:  744:                last_activity = time(NULL);
        -:  745:            }
        -:  746:        }
        -:  747:
        -:  748:        // טיפול ב-UDP
       26:  749:        if (FD_ISSET(udp_sock, &read_fds)) {
        4:  750:            handle_dgram_socket(udp_sock);
        4:  751:            last_activity = time(NULL);
        -:  752:        }
        -:  753:
        -:  754:        // טיפול ב-UDS Datagram
       26:  755:        if (uds_dgram_sock >= 0 && FD_ISSET(uds_dgram_sock, &read_fds)) {
        6:  756:            handle_dgram_socket(uds_dgram_sock);
        6:  757:            last_activity = time(NULL);
        -:  758:        }
        -:  759:    }
        -:  760:
        -:  761:    // ניקוי
    #####:  762:    for (int i = 0; i < MAX_CLIENTS; i++) {
    #####:  763:        if (client_fds[i] != -1) close(client_fds[i]);
        -:  764:    }
        -:  765:    
    #####:  766:    if (tcp_sock >= 0) close(tcp_sock);
    #####:  767:    if (udp_sock >= 0) close(udp_sock);
    #####:  768:    if (uds_stream_sock >= 0) close(uds_stream_sock);
    #####:  769:    if (uds_dgram_sock >= 0) close(uds_dgram_sock);
        -:  770:    
    #####:  771:    if (uds_stream_path) {
    #####:  772:        unlink(uds_stream_path);
    #####:  773:        free(uds_stream_path);
        -:  774:    }
    #####:  775:    if (uds_dgram_path) {
    #####:  776:        unlink(uds_dgram_path);
    #####:  777:        free(uds_dgram_path);
        -:  778:    }
        -:  779:    //free(inventory);
        -:  780:
    #####:  781:    return 0;
        -:  782:}
